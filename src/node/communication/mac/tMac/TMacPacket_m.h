//
// Generated file, do not edit! Created by nedtool 5.0 from src/node/communication/mac/tMac/TMacPacket.msg.
//

#ifndef __TMACPACKET_M_H
#define __TMACPACKET_M_H

#include <omnetpp.h>

// nedtool version check
#define MSGC_VERSION 0x0500
#if (MSGC_VERSION!=OMNETPP_VERSION)
#    error Version mismatch! Probably this file was generated by an earlier version of nedtool: 'make clean' should help.
#endif



// cplusplus {{
#include "MacPacket_m.h"
#include <vector>
// }}

/**
 * Enum generated from <tt>src/node/communication/mac/tMac/TMacPacket.msg:20</tt> by nedtool.
 * <pre>
 * enum TmacPacket_type
 * {
 * 
 *     BEACON_TMAC_PACKET = 1;
 *     ACK_TMAC_PACKET = 2;
 *     GACK_TMAC_PACKET = 3;
 *     OACK_TMAC_PACKET = 4;
 *     SACK_TMAC_PACKET = 5;
 *     DATA_TMAC_PACKET = 6;
 * }
 * </pre>
 */
enum TmacPacket_type {
    BEACON_TMAC_PACKET = 1,
    ACK_TMAC_PACKET = 2,
    GACK_TMAC_PACKET = 3,
    OACK_TMAC_PACKET = 4,
    SACK_TMAC_PACKET = 5,
    DATA_TMAC_PACKET = 6
};

/**
 * Class generated from <tt>src/node/communication/mac/tMac/TMacPacket.msg:29</tt> by nedtool.
 * <pre>
 * packet TMacPacket extends MacPacket
 * {
 *     // This a basic field, essential for any packet
 *     // size including source and destination field (found 
 *     // in the generic MacPAcket) is 9 bytes in total
 *     int type @enum(TmacPacket_type);	// 1 byte
 *     //ACK
 *     int bufferSize;
 *     //G-ACK which node's ack had been receieved
 *     bool ackedNode[];
 *     //O-ACK 
 *     int transferOrder[];
 *     int O_ACK_bufferSize[];
 * }
 * </pre>
 */
class TMacPacket : public ::MacPacket
{
  protected:
    int type;
    int bufferSize;
    bool *ackedNode; // array ptr
    unsigned int ackedNode_arraysize;
    int *transferOrder; // array ptr
    unsigned int transferOrder_arraysize;
    int *O_ACK_bufferSize; // array ptr
    unsigned int O_ACK_bufferSize_arraysize;

  private:
    void copy(const TMacPacket& other);

  protected:
    // protected and unimplemented operator==(), to prevent accidental usage
    bool operator==(const TMacPacket&);

  public:
    TMacPacket(const char *name=nullptr, int kind=0);
    TMacPacket(const TMacPacket& other);
    virtual ~TMacPacket();
    TMacPacket& operator=(const TMacPacket& other);
    virtual TMacPacket *dup() const {return new TMacPacket(*this);}
    virtual void parsimPack(omnetpp::cCommBuffer *b) const;
    virtual void parsimUnpack(omnetpp::cCommBuffer *b);

    // field getter/setter methods
    virtual int getType() const;
    virtual void setType(int type);
    virtual int getBufferSize() const;
    virtual void setBufferSize(int bufferSize);
    virtual void setAckedNodeArraySize(unsigned int size);
    virtual unsigned int getAckedNodeArraySize() const;
    virtual bool getAckedNode(unsigned int k) const;
    virtual void setAckedNode(unsigned int k, bool ackedNode);
    virtual void setTransferOrderArraySize(unsigned int size);
    virtual unsigned int getTransferOrderArraySize() const;
    virtual int getTransferOrder(unsigned int k) const;
    virtual void setTransferOrder(unsigned int k, int transferOrder);
    virtual void setO_ACK_bufferSizeArraySize(unsigned int size);
    virtual unsigned int getO_ACK_bufferSizeArraySize() const;
    virtual int getO_ACK_bufferSize(unsigned int k) const;
    virtual void setO_ACK_bufferSize(unsigned int k, int O_ACK_bufferSize);
};

inline void doParsimPacking(omnetpp::cCommBuffer *b, const TMacPacket& obj) {obj.parsimPack(b);}
inline void doParsimUnpacking(omnetpp::cCommBuffer *b, TMacPacket& obj) {obj.parsimUnpack(b);}


#endif // ifndef __TMACPACKET_M_H

